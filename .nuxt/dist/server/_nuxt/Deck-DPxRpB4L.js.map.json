{"file":"Deck-DPxRpB4L.js","mappings":"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","names":["_useModel","_withAsyncContext"],"sources":["../../../../node_modules/nuxt/dist/app/composables/asyncData.js","../../../../components/Deck.vue"],"sourcesContent":["import { computed, getCurrentInstance, getCurrentScope, onBeforeMount, onScopeDispose, onServerPrefetch, onUnmounted, ref, shallowRef, toRef, unref, watch } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { toArray } from \"../utils.js\";\nimport { createError } from \"./error.js\";\nimport { onNuxtReady } from \"./ready.js\";\nimport { asyncDataDefaults, resetAsyncDataToUndefined } from \"#build/nuxt.config.mjs\";\nconst isDefer = (dedupe) => dedupe === \"defer\" || dedupe === false;\nexport function useAsyncData(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  let [key, _handler, options = {}] = args;\n  if (typeof key !== \"string\") {\n    throw new TypeError(\"[nuxt] [asyncData] key must be a string.\");\n  }\n  if (typeof _handler !== \"function\") {\n    throw new TypeError(\"[nuxt] [asyncData] handler must be a function.\");\n  }\n  const nuxtApp = useNuxtApp();\n  const handler = import.meta.client || !import.meta.prerender || !nuxtApp.ssrContext?._sharedPrerenderCache ? _handler : () => {\n    const value = nuxtApp.ssrContext._sharedPrerenderCache.get(key);\n    if (value) {\n      return value;\n    }\n    const promise = Promise.resolve().then(() => nuxtApp.runWithContext(_handler));\n    nuxtApp.ssrContext._sharedPrerenderCache.set(key, promise);\n    return promise;\n  };\n  const getDefault = () => asyncDataDefaults.value;\n  const getDefaultCachedData = () => nuxtApp.isHydrating ? nuxtApp.payload.data[key] : nuxtApp.static.data[key];\n  options.server = options.server ?? true;\n  options.default = options.default ?? getDefault;\n  options.getCachedData = options.getCachedData ?? getDefaultCachedData;\n  options.lazy = options.lazy ?? false;\n  options.immediate = options.immediate ?? true;\n  options.deep = options.deep ?? asyncDataDefaults.deep;\n  options.dedupe = options.dedupe ?? \"cancel\";\n  if (import.meta.dev && typeof options.dedupe === \"boolean\") {\n    console.warn(\"[nuxt] `boolean` values are deprecated for the `dedupe` option of `useAsyncData` and will be removed in the future. Use 'cancel' or 'defer' instead.\");\n  }\n  const initialCachedData = options.getCachedData(key, nuxtApp);\n  const hasCachedData = initialCachedData != null;\n  if (!nuxtApp._asyncData[key] || !options.immediate) {\n    nuxtApp.payload._errors[key] ??= asyncDataDefaults.errorValue;\n    const _ref = options.deep ? ref : shallowRef;\n    nuxtApp._asyncData[key] = {\n      data: _ref(hasCachedData ? initialCachedData : options.default()),\n      pending: ref(!hasCachedData),\n      error: toRef(nuxtApp.payload._errors, key),\n      status: ref(\"idle\"),\n      _default: options.default\n    };\n  }\n  const asyncData = { ...nuxtApp._asyncData[key] };\n  delete asyncData._default;\n  asyncData.refresh = asyncData.execute = (opts = {}) => {\n    if (nuxtApp._asyncDataPromises[key]) {\n      if (isDefer(opts.dedupe ?? options.dedupe)) {\n        return nuxtApp._asyncDataPromises[key];\n      }\n      nuxtApp._asyncDataPromises[key].cancelled = true;\n    }\n    if (opts._initial || nuxtApp.isHydrating && opts._initial !== false) {\n      const cachedData = opts._initial ? initialCachedData : options.getCachedData(key, nuxtApp);\n      if (cachedData != null) {\n        return Promise.resolve(cachedData);\n      }\n    }\n    asyncData.pending.value = true;\n    asyncData.status.value = \"pending\";\n    const promise = new Promise(\n      (resolve, reject) => {\n        try {\n          resolve(handler(nuxtApp));\n        } catch (err) {\n          reject(err);\n        }\n      }\n    ).then(async (_result) => {\n      if (promise.cancelled) {\n        return nuxtApp._asyncDataPromises[key];\n      }\n      let result = _result;\n      if (options.transform) {\n        result = await options.transform(_result);\n      }\n      if (options.pick) {\n        result = pick(result, options.pick);\n      }\n      if (import.meta.dev && import.meta.server && typeof result === \"undefined\") {\n        console.warn(`[nuxt] \\`${options._functionName || \"useAsyncData\"}\\` must return a value (it should not be \\`undefined\\`) or the request may be duplicated on the client side.`);\n      }\n      nuxtApp.payload.data[key] = result;\n      asyncData.data.value = result;\n      asyncData.error.value = asyncDataDefaults.errorValue;\n      asyncData.status.value = \"success\";\n    }).catch((error) => {\n      if (promise.cancelled) {\n        return nuxtApp._asyncDataPromises[key];\n      }\n      asyncData.error.value = createError(error);\n      asyncData.data.value = unref(options.default());\n      asyncData.status.value = \"error\";\n    }).finally(() => {\n      if (promise.cancelled) {\n        return;\n      }\n      asyncData.pending.value = false;\n      delete nuxtApp._asyncDataPromises[key];\n    });\n    nuxtApp._asyncDataPromises[key] = promise;\n    return nuxtApp._asyncDataPromises[key];\n  };\n  asyncData.clear = () => clearNuxtDataByKey(nuxtApp, key);\n  const initialFetch = () => asyncData.refresh({ _initial: true });\n  const fetchOnServer = options.server !== false && nuxtApp.payload.serverRendered;\n  if (import.meta.server && fetchOnServer && options.immediate) {\n    const promise = initialFetch();\n    if (getCurrentInstance()) {\n      onServerPrefetch(() => promise);\n    } else {\n      nuxtApp.hook(\"app:created\", async () => {\n        await promise;\n      });\n    }\n  }\n  if (import.meta.client) {\n    const instance = getCurrentInstance();\n    if (import.meta.dev && !nuxtApp.isHydrating && !nuxtApp._processingMiddleware && (!instance || instance?.isMounted)) {\n      console.warn(`[nuxt] [${options._functionName || \"useAsyncData\"}] Component is already mounted, please use $fetch instead. See https://nuxt.com/docs/getting-started/data-fetching`);\n    }\n    if (instance && !instance._nuxtOnBeforeMountCbs) {\n      instance._nuxtOnBeforeMountCbs = [];\n      const cbs = instance._nuxtOnBeforeMountCbs;\n      onBeforeMount(() => {\n        cbs.forEach((cb) => {\n          cb();\n        });\n        cbs.splice(0, cbs.length);\n      });\n      onUnmounted(() => cbs.splice(0, cbs.length));\n    }\n    if (fetchOnServer && nuxtApp.isHydrating && (asyncData.error.value || initialCachedData != null)) {\n      asyncData.pending.value = false;\n      asyncData.status.value = asyncData.error.value ? \"error\" : \"success\";\n    } else if (instance && (nuxtApp.payload.serverRendered && nuxtApp.isHydrating || options.lazy) && options.immediate) {\n      instance._nuxtOnBeforeMountCbs.push(initialFetch);\n    } else if (options.immediate) {\n      initialFetch();\n    }\n    const hasScope = getCurrentScope();\n    if (options.watch) {\n      const unsub = watch(options.watch, () => asyncData.refresh());\n      if (hasScope) {\n        onScopeDispose(unsub);\n      }\n    }\n    const off = nuxtApp.hook(\"app:data:refresh\", async (keys) => {\n      if (!keys || keys.includes(key)) {\n        await asyncData.refresh();\n      }\n    });\n    if (hasScope) {\n      onScopeDispose(off);\n    }\n  }\n  const asyncDataPromise = Promise.resolve(nuxtApp._asyncDataPromises[key]).then(() => asyncData);\n  Object.assign(asyncDataPromise, asyncData);\n  return asyncDataPromise;\n}\nexport function useLazyAsyncData(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  const [key, handler, options = {}] = args;\n  if (import.meta.dev && import.meta.client) {\n    options._functionName ||= \"useLazyAsyncData\";\n  }\n  return useAsyncData(key, handler, { ...options, lazy: true }, null);\n}\nexport function useNuxtData(key) {\n  const nuxtApp = useNuxtApp();\n  if (!(key in nuxtApp.payload.data)) {\n    nuxtApp.payload.data[key] = asyncDataDefaults.value;\n  }\n  return {\n    data: computed({\n      get() {\n        return nuxtApp._asyncData[key]?.data.value ?? nuxtApp.payload.data[key];\n      },\n      set(value) {\n        if (nuxtApp._asyncData[key]) {\n          nuxtApp._asyncData[key].data.value = value;\n        } else {\n          nuxtApp.payload.data[key] = value;\n        }\n      }\n    })\n  };\n}\nexport async function refreshNuxtData(keys) {\n  if (import.meta.server) {\n    return Promise.resolve();\n  }\n  await new Promise((resolve) => onNuxtReady(resolve));\n  const _keys = keys ? toArray(keys) : void 0;\n  await useNuxtApp().hooks.callHookParallel(\"app:data:refresh\", _keys);\n}\nexport function clearNuxtData(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.data);\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : toArray(keys);\n  for (const key of _keys) {\n    clearNuxtDataByKey(nuxtApp, key);\n  }\n}\nfunction clearNuxtDataByKey(nuxtApp, key) {\n  if (key in nuxtApp.payload.data) {\n    nuxtApp.payload.data[key] = void 0;\n  }\n  if (key in nuxtApp.payload._errors) {\n    nuxtApp.payload._errors[key] = asyncDataDefaults.errorValue;\n  }\n  if (nuxtApp._asyncData[key]) {\n    nuxtApp._asyncData[key].data.value = resetAsyncDataToUndefined ? void 0 : nuxtApp._asyncData[key]._default();\n    nuxtApp._asyncData[key].error.value = asyncDataDefaults.errorValue;\n    nuxtApp._asyncData[key].pending.value = false;\n    nuxtApp._asyncData[key].status.value = \"idle\";\n  }\n  if (key in nuxtApp._asyncDataPromises) {\n    if (nuxtApp._asyncDataPromises[key]) {\n      nuxtApp._asyncDataPromises[key].cancelled = true;\n    }\n    nuxtApp._asyncDataPromises[key] = void 0;\n  }\n}\nfunction pick(obj, keys) {\n  const newObj = {};\n  for (const key of keys) {\n    newObj[key] = obj[key];\n  }\n  return newObj;\n}\n","<script setup lang=\"ts\">\n\nimport type { Member } from '~/components/Member'\nimport { alterColors, ColorAdjustParas, randomColor } from './ColorFunctions';\nimport { useDisplay } from 'vuetify';\n\nconst colorLightenLvl = 4\nvar cardColors = alterColors(ColorAdjustParas.lighten, colorLightenLvl)\n\ntype PositionGroup = {\n    position: string,\n    member: Member[]\n}\n\nconst yearLvl = defineModel<string>(\"yearLvl\")\n\nconst fetchDatas = async (year: string): Promise<PositionGroup[]> => {\n    loading.value = true\n    loadingColors.value = randomLoadingColor()\n    await sleep(2000)\n    loading.value = false\n    return [\n        {\n            position: \"Lead\",\n            member: [\n                {\n                    name: year,\n                    position: \"Lead\",\n                    avatar: null,\n                    color: \"bg-blue\",\n                    summary: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n                    fbLink: \"https://www.facebook.com/chenlin.wang.16100/\",\n                    lnLink: \"https://www.facebook.com/chenlin.wang.16100/\",\n                    itLink: \"https://www.facebook.com/chenlin.wang.16100/\"\n                },\n            ]\n        }, {\n            position: \"Co-Lead\",\n            member: [\n                {\n                    name: year,\n                    position: \"Co-Lead\",\n                    avatar: null,\n                    color: \"bg-blue\",\n                    summary: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n                    fbLink: \"https://www.facebook.com/chenlin.wang.16100/\",\n                    lnLink: \"https://www.facebook.com/chenlin.wang.16100/\",\n                    itLink: \"https://www.facebook.com/chenlin.wang.16100/\"\n                },\n            ]\n        }, {\n            position: \"Asst. Executive Secretary\",\n            member: [\n                {\n                    name: year,\n                    position: \"Asst. Executive Secretary\",\n                    avatar: null,\n                    color: \"bg-blue\",\n                    summary: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n                    fbLink: \"https://www.facebook.com/chenlin.wang.16100/\",\n                    lnLink: \"https://www.facebook.com/chenlin.wang.16100/\",\n                    itLink: \"https://www.facebook.com/chenlin.wang.16100/\"\n                }, {\n                    name: \"Member Name\",\n                    position: \"Asst. Executive Secretary\",\n                    avatar: null,\n                    color: \"bg-red\",\n                    summary: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n                    fbLink: \"https://www.facebook.com/chenlin.wang.16100/\",\n                    lnLink: \"https://www.facebook.com/chenlin.wang.16100/\",\n                }, {\n                    name: year,\n                    position: \"Asst. Executive Secretary\",\n                    avatar: null,\n                    color: \"bg-blue\",\n                    summary: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n                    fbLink: \"https://www.facebook.com/chenlin.wang.16100/\",\n                    lnLink: \"https://www.facebook.com/chenlin.wang.16100/\",\n                    itLink: \"https://www.facebook.com/chenlin.wang.16100/\"\n                }, {\n                    name: \"Member Name\",\n                    position: \"Asst. Executive Secretary\",\n                    avatar: null,\n                    color: \"bg-red\",\n                    summary: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n                    fbLink: \"https://www.facebook.com/chenlin.wang.16100/\",\n                    lnLink: \"https://www.facebook.com/chenlin.wang.16100/\",\n                },\n            ]\n        }\n    ]\n}\n\nconst randomLoadingColor = (): string[] => {\n    return [0, 1, 2, 3, 4, 5].map(i => {\n        const res = randomColor(cardColors)\n        if (res.remainingColors.length === 0) { cardColors = alterColors(ColorAdjustParas.lighten, colorLightenLvl) }\n        else { cardColors = res.remainingColors }\n        return res.color\n    })\n    \n}\n\nconst datas = ref<PositionGroup[]>([])\nconst loading = ref(true)\nconst { data: loadingColors} = await useAsyncData('makeLoadingColors', async () => randomLoadingColor())\nconst { data: years } = await useAsyncData('fetchYearLabels', async () => ['2019 - 2020', '2020 - 2021', '2021 - 2022', '2022 - 2023', '2023 - 2024'])\n\nonMounted(() => {\n    yearLvlChanged(yearLvl.value)\n})\n\nconst yearLvlChanged = (yearL?: string) => {\n    if (yearL) fetchDatas(yearL)\n        .then(res => {\n            datas.value = res\n        })\n}\n\nconst sleep = (ms: number) => new Promise((r) => setTimeout(r, ms));\n\nconst isSmallScreen = () => useDisplay().width.value < 400\n\n</script>\n\n<template>\n    <v-container>\n        <v-row style=\"width: 160px\" class=\"mx-auto\">\n            <v-select single-line density=\"compact\" variant=\"solo\" rounded :items=\"years as string[]\"\n                :disabled=\"loading\" @update:model-value=\"yearLvlChanged($event as string)\" v-model=\"yearLvl\"\n                style=\"text-align: center;\"></v-select>\n        </v-row>\n        <ClientOnly>\n            <v-row v-if=\"!loading\" v-for=\"(p, i) in datas\" no-gutters>\n                <v-row v-if=\"p.member.length === 1\" no-gutters>\n                    <v-col :class=\"'pa-0 ' + (isSmallScreen() ? 'ma-2' : 'ma-5')\">\n                        <Card class=\"mx-auto\" :member=\"/* @ts-ignore */p.member[0]\"></Card>\n                    </v-col>\n                </v-row>\n\n                <v-data-iterator class=\"mx-auto\" v-if=\"p.member.length > 1\" :items=\"p.member\">\n                    <template v-slot:default=\"{ items }\">\n                        <v-row no-gutters>\n                            <v-col :class=\"'pa-0 ' + (isSmallScreen() ? 'ma-2' : 'ma-5')\"\n                                v-for=\"(member, index) in items\" :key=\"index\">\n                                <Card class=\"mx-auto\" :member=\"/* @ts-ignore */member.raw\"></Card>\n                            </v-col>\n                        </v-row>\n                    </template>\n                </v-data-iterator>\n            </v-row>\n            <v-row v-else no-gutters>\n                <v-col v-for=\"(color, k) in loadingColors\">\n                    <v-skeleton-loader :color=\"color\" style=\"border-radius: 10px;\" :elevation=\"12\"\n                        :class=\"'border mx-auto pa-0 ' + (isSmallScreen() ? 'my-2' : 'my-5')\" width=\"320\" height=\"190\"\n                        type=\"list-item-avatar-three-line, paragraph\"></v-skeleton-loader>\n                </v-col>\n            </v-row>\n        </ClientOnly>\n    </v-container>\n</template>\n\n<style lang=\"css\" scoped>\n::v-deep(.v-field__field) {\n    margin-left: 18px;\n}\n\n::v-deep(.v-field__append-inner) {\n    width: 0px;\n}\n\n::v-deep(.v-select .mdi:before, .mdi-set ) {\n    visibility: hidden\n}\n</style>"],"version":3}
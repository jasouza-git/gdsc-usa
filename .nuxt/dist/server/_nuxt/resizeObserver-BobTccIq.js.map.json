{"file":"resizeObserver-BobTccIq.js","mappings":";;AAIO,SAAS,kBAAkB,UAAU;AAE1C,QAAM,YAAY;AAClB,QAAM,cAAc;AAwBpB,SAAO;AAAA,IACL;AAAA,IACA,aAAa,SAAS,WAAW;AAAA,EACrC;AACA;","names":[],"sources":["../../../../node_modules/vuetify/lib/composables/resizeObserver.mjs"],"sourcesContent":["// Utilities\nimport { onBeforeUnmount, readonly, ref, watch } from 'vue';\nimport { templateRef } from \"../util/index.mjs\";\nimport { IN_BROWSER } from \"../util/globals.mjs\"; // Types\nexport function useResizeObserver(callback) {\n  let box = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'content';\n  const resizeRef = templateRef();\n  const contentRect = ref();\n  if (IN_BROWSER) {\n    const observer = new ResizeObserver(entries => {\n      callback?.(entries, observer);\n      if (!entries.length) return;\n      if (box === 'content') {\n        contentRect.value = entries[0].contentRect;\n      } else {\n        contentRect.value = entries[0].target.getBoundingClientRect();\n      }\n    });\n    onBeforeUnmount(() => {\n      observer.disconnect();\n    });\n    watch(() => resizeRef.el, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue);\n        contentRect.value = undefined;\n      }\n      if (newValue) observer.observe(newValue);\n    }, {\n      flush: 'post'\n    });\n  }\n  return {\n    resizeRef,\n    contentRect: readonly(contentRect)\n  };\n}\n//# sourceMappingURL=resizeObserver.mjs.map"],"version":3}